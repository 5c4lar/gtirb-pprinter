#pragma once

#include <cstdint>
#include <gtirb/gtirb.hpp>
#include <iosfwd>
#include <list>
#include <map>
#include <string>
#include <vector>
#include "DisasmTypes.h"
#include "Export.h"
#include "Table.h"

///
/// \class DisasmData
///
/// Port of the prolog disasm.
///
class DEBLOAT_PRETTYPRINTER_EXPORT_API DisasmData {
public:
  ///
  /// Read all of the expected file types out of a directory.
  ///
  /// This calls all of the individual "parse" functions for the known file names in the given
  /// directory.
  ///
  void parseDirectory(std::string x);

  void saveIRToFile(std::string path);
  void loadIRFromFile(std::string path);

  // FIXME: IR should replace DisasmData entirely.
  gtirb::IR ir;

  const gtirb::SymbolSet& getSymbols() const;
  const std::vector<gtirb::Section>& getSections() const;
  std::map<gtirb::EA, DecodedInstruction>* getDecodedInstruction();
  std::vector<OpRegdirect>* getOPRegdirect();
  std::map<uint64_t, OpImmediate>* getOPImmediate();
  std::map<uint64_t, OpIndirect>* getOPIndirect();
  std::vector<std::string>* getAmbiguousSymbol();
  std::vector<gtirb::table::InnerMapType>& getDataSections();

  bool isFunction(const gtirb::Symbol& sym) const;
  std::string getSectionName(uint64_t x) const;
  std::string getFunctionName(gtirb::EA x) const;
  std::string getGlobalSymbolReference(uint64_t ea) const;
  std::string getGlobalSymbolName(uint64_t ea) const;
  const DecodedInstruction* getDecodedInstruction(uint64_t ea) const;
  const OpIndirect* getOpIndirect(uint64_t x) const;
  const OpRegdirect* getOpRegdirect(uint64_t x) const;
  uint64_t getOpRegdirectCode(std::string name) const;
  const OpImmediate* getOpImmediate(uint64_t x) const;
  bool isRelocated(const std::string& x) const;
  const gtirb::Section* getSection(const std::string& x) const;

  bool getIsAmbiguousSymbol(const std::string& ea) const;

  static void AdjustPadding(std::vector<gtirb::Block*>& blocks);
  static std::string CleanSymbolNameSuffix(std::string x);
  static std::string AdaptOpcode(const std::string& x);
  static std::string AdaptRegister(const std::string& x);
  static std::string GetSizeName(uint64_t x);
  static std::string GetSizeName(const std::string& x);
  static std::string GetSizeSuffix(const OpIndirect& x);
  static std::string GetSizeSuffix(uint64_t x);
  static std::string GetSizeSuffix(const std::string& x);
  static bool GetIsReservedSymbol(const std::string& x);
  static std::string AvoidRegNameConflicts(const std::string& x);

private:
  ///
  /// Parse the statistics facts file.
  ///
  void parseDecodedInstruction(const std::string& x);
  void parseOpRegdirect(const std::string& x);
  void parseOpImmediate(const std::string& x);
  void parseOpIndirect(const std::string& x);

  // these are facts generated by the decoder
  std::map<gtirb::EA, DecodedInstruction> instruction;
  std::vector<OpRegdirect> op_regdirect;
  std::map<uint64_t, OpImmediate> op_immediate;
  std::map<uint64_t, OpIndirect> op_indirect;

  // these facts are necessary for printing the asm
  std::vector<gtirb::EA> functionEAs;
  std::vector<std::string> ambiguous_symbol;
  std::vector<gtirb::EA> start_function;
  std::vector<gtirb::EA> main_function;
  std::vector<gtirb::EA> function_entry;
};

const std::pair<std::string, int>* getDataSectionDescriptor(const std::string& name);

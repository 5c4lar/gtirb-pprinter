# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  config.vm.box = "gusztavvargadr/windows-10"

  config.vm.provision "setup-gitlab-requirements", type: "shell", inline: <<-SHELL
    cd $HOME
    Invoke-WebRequest https://www.cygwin.com/setup-x86_64.exe -OutFile setup-x86_64.exe
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "C:\\Users\\vagrant\\setup-x86_64.exe"
    $startInfo.Arguments = "--no-shortcuts --no-desktop -q --site http://cygwin.mirror.constant.com --packages git,cygrunsrv,openssh,unzip,zip"
    $startInfo.UseShellExecute = $true
    $startInfo.CreateNoWindow = $false
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start()
    $process.WaitForExit()
    C:\\cygwin64\\bin\\bash.exe --login -c "/bin/ssh-host-config -y -c ntsec -p 22"
    C:\\cygwin64\\bin\\bash.exe --login -c "net stop sshd"
    cmd.exe /C "sc config ""sshd"" start= disabled"
    C:\\cygwin64\\bin\\bash.exe --login -c "net start cygsshd"
    cmd.exe /C "sc config ""cygsshd"" start=auto"
    choco install -y git-lfs
    C:\\cygwin64\\bin\\bash.exe --login -c  "mkdir ~/.ssh"
    C:\\cygwin64\\bin\\bash.exe --login -c  "echo 'git.grammatech.com' > ~/.ssh/known_hosts"
  SHELL

  config.vm.provision "setup-gitlab-runner", type: "shell", inline: <<-SHELL
    cd $HOME
    mkdir C:\\GitLab-Runner
    Invoke-WebRequest https://gitlab-runner-downloads.s3.amazonaws.com/latest/binaries/gitlab-runner-windows-amd64.exe -OutFile C:\\GitLab-Runner\\gitlab-runner.exe
    C:\\GitLab-Runner\\gitlab-runner.exe install
    C:\\GitLab-Runner\\gitlab-runner.exe start
    cmd.exe /C 'setx /M PATH "%PATH%;C:\\GitLab-Runner"'
  SHELL

  config.vm.provision "setup-dev-tools", type: "shell", inline: <<-SHELL
    choco install -y git
    choco install -y cmake
    choco install -y ninja
    choco install -y python3
    choco install -y conan
    cd $HOME
    Invoke-WebRequest "https://download.visualstudio.microsoft.com/download/pr/57d28351-e762-4ee1-aca4-16b6d3faaa33/9fd19a14823506bdbd249be8f519e4a17af494df5cd92e3dc65e110a744d6ebb/vs_Community.exe" -OutFile vs_community.exe
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "C:\\Users\\vagrant\\vs_community.exe"
    $startInfo.Arguments = "--installPath ""C:\\VS"" --add Microsoft.VisualStudio.Component.VC.Tools.x86.x64 --add Microsoft.VisualStudio.Component.VC.CoreBuildTools --add Microsoft.VisualStudio.Component.VC.Redist.14.Latest --add Microsoft.VisualStudio.Component.Windows10SDK --add Microsoft.VisualStudio.Component.Windows10SDK.18362 --includeRecommended --passive --wait"
    $startInfo.UseShellExecute = $true
    $startInfo.CreateNoWindow = $false
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start()
    $process.WaitForExit()
  SHELL

  # The provisioner belows uses the installer from sourceforge, because it is
  # MUCH faster than downloading the zip archive and using powershell's
  # Expand-Archive cmdlet.  The b2 invocation is not actually building any of
  # the libraries, it's just installing them from a staging folder provided by
  # the installer.  It is still necessary to bootstrap b2 even when using the
  # installer.
  config.vm.provision "install-boost", type: "shell", inline: <<-SHELL
    cd $HOME
    curl.exe -L "https://downloads.sourceforge.net/project/boost/boost-binaries/1.67.0/boost_1_67_0-msvc-14.1-64.exe?r=https%3A%2F%2Fsourceforge.net%2Fprojects%2Fboost%2Ffiles%2Fboost-binaries%2F1.67.0%2Fboost_1_67_0-msvc-14.1-64.exe%2Fdownload&ts=1601299463" --output "boost_1_67_0-msvc-14.1-64.exe"
    $startInfo = New-Object System.Diagnostics.ProcessStartInfo
    $startInfo.FileName = "C:\\Users\\vagrant\\boost_1_67_0-msvc-14.1-64.exe"
    $startInfo.Arguments = "/NORESTART /DIR=""C:\\Boost-stage"" /SILENT"
    $startInfo.UseShellExecute = $true
    $startInfo.CreateNoWindow = $false
    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $startInfo
    $process.Start()
    $process.WaitForExit()
    cd C:\\Boost-stage
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && .\\bootstrap.bat"
    $msvc_path = & C:\\cygwin64\\bin\\bash.exe --login -c 'find /cygdrive/c/VS/VC/Tools/MSVC/ -maxdepth 1 | tail -n +2 | xargs -i basename {}'
    Set-Content -Path "C:\\Boost-stage\\project-config.jam" -Value @"
import option ;

using msvc : 14.1 : "C:\\\\VS\\\\VC\\\\Tools\\\\MSVC\\\\$msvc_path\\\\bin\\\\Hostx64\\\\x64\\\\cl.exe" ;

option.set keep-going : false ;

"@
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && .\\b2.exe install address-model=64 variant=debug,release link=shared runtime-link=shared --with-program_options --with-filesystem --with-system"
  SHELL

  config.vm.provision "build-protobuf", type: "shell", inline: <<-SHELL
    cd $HOME
    git clone https://github.com/protocolbuffers/protobuf.git
    cd protobuf
    git checkout tags/v3.7.0

    mkdir cmake-build-debug
    cd cmake-build-debug
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ""C:\\Program Files\\CMake\\bin\\cmake.exe"" -G ""Ninja"" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_SHARED_LIBS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF ../cmake"
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja install"

    cd ..
    mkdir cmake-build-release
    cd cmake-build-release
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ""C:\\Program Files\\CMake\\bin\\cmake.exe"" -G ""Ninja"" -Dprotobuf_BUILD_TESTS=OFF -Dprotobuf_BUILD_SHARED_LIBS=OFF -Dprotobuf_MSVC_STATIC_RUNTIME=OFF -DCMAKE_BUILD_TYPE=Release ../cmake"
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja install"
  SHELL

  config.vm.provision "build-capstone", type: "shell", inline: <<-SHELL
    cd $HOME

    git clone -b next https://github.com/GrammaTech/capstone

    mkdir /cygdrive/C/capstone-debug
    mkdir /cygdrive/C/capstone-release

    cd capstone
    mkdir build-debug
    cd build-debug
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ""C:\\Program Files\\CMake\\bin\\cmake.exe"" -G ""Ninja""  -DCMAKE_INSTALL_PREFIX=C:\\capstone-debug .."
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja install"

    cd ..
    mkdir build-release
    cd build-release
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ""C:\\Program Files\\CMake\\bin\\cmake.exe"" -G ""Ninja"" -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=C:\\capstone-release .."
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja install"
  SHELL
end

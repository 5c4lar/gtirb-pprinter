FROM ubuntu:16.04

ENV LD_LIBRARY_PATH /usr/local/lib:$LD_LIBRARY_PATH

# Minimum required version
ARG CMAKE_VERSION=3.9
ARG BOOST_VERSION=1.67.0
ARG PROTOBUF_VERSION=3.7.0

# Use bash for more convenient variable substitution syntax
SHELL ["/bin/bash", "-c"]

# Install common packages
RUN apt-get -y update && \
    apt-get -y install apt-transport-https build-essential curl git make \
        python3 software-properties-common wget

# Install libstdc++
RUN add-apt-repository ppa:jonathonf/gcc-7.1 && \
    apt-get -y update && \
    apt-get -y install libstdc++-7-dev

# Install Clang++
RUN wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|apt-key add - && \
    add-apt-repository 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-8 main' && \
    apt-get -y update && \
    apt-get -y install clang-8 && \
    update-alternatives --install /usr/bin/clang clang /usr/bin/clang-8 60 \
                        --slave /usr/bin/clang++ clang++ /usr/bin/clang++-8 && \
    update-alternatives --install /usr/bin/cc cc /usr/bin/clang-8 60 && \
    update-alternatives --install /usr/bin/c++ c++ /usr/bin/clang++-8 60

# Install CMake
RUN curl -SL https://cmake.org/files/v$CMAKE_VERSION/cmake-$CMAKE_VERSION.0-Linux-x86_64.tar.gz \
    |tar -xz --strip-components=1 -C /usr/local

# Install Boost
RUN add-apt-repository ppa:mhier/libboost-latest && \
    apt-get -y update && \
    apt-get -y install libboost${BOOST_VERSION}-dev

# Install protobuf
RUN cd /usr/local/src \
    && wget https://github.com/google/protobuf/releases/download/v${PROTOBUF_VERSION}/protobuf-cpp-${PROTOBUF_VERSION}.tar.gz \
    && tar xf protobuf-cpp-${PROTOBUF_VERSION}.tar.gz \
    && cd protobuf-${PROTOBUF_VERSION} \
    && ./configure \
    && make \
    && make install \
    && cd .. \
    && rm -rf protobuf-${PROTOBUF_VERSION} protobuf-cpp-${PROTOBUF_VERSION}.tar.gz
RUN ldconfig

# Install capstone
RUN cd /usr/local/src \
    && wget https://github.com/aquynh/capstone/archive/4.0.1.tar.gz \
    && tar xf 4.0.1.tar.gz \
    && cd capstone-4.0.1 \
    && CAPSTONE_ARCHS=x86 ./make.sh \
    && CAPSTONE_ARCHS=x86 ./make.sh install

# Install GTIRB and build gtirb-pprinter
COPY . /gt/gtirb-pprinter/
ENV LD_LIBRARY_PATH /gt/gtirb-pprinter/gtirb/build/lib:$LD_LIBRARY_PATH
RUN /gt/gtirb-pprinter/.ci/build-linux.sh clang++-8
ARG CPACK_GENERATOR=""
RUN if [ ! -z "${CPACK_GENERATOR}" ] ; then cd /gt/gtirb-pprinter/build && cpack -G "${CPACK_GENERATOR}"; fi

WORKDIR /gt/gtirb-pprinter/
ENV PATH=/gt/gtirb-pprinter/build/bin:$PATH

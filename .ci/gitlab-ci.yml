variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - docker info

stages:
  - check-format
  - build
  - test-and-tag
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

.build-template: &build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - docker build -f .ci/Dockerfile.$OS-$COMPILER -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} .

build-ubuntu16-gcc:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *build

run-ubuntu16-gcc:
  stage: test-and-tag
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  script:
    - if [ "$CI_BUILD_REF_NAME" == "master" ] && [ "$OS" == "ubuntu16" ];
      then
        docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} $DOCKER_REGISTRY/$CI_PROJECT_PATH:latest;
        docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
        docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:latest;
      fi

build-ubuntu16-clang:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *build

# build-ubuntu14:
#   stage: build-test-ubuntu14-gcc
#   variables:
#     OS: 'ubuntu14'
#   <<: *build

# build-arch:
#   stage: build-test-arch-gcc
#   variables:
#     OS: 'arch'
#     COMPILER: 'gcc'
#   <<: *build

cleanup-ubuntu16-gcc:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

cleanup-ubuntu16-clang:
  stage: cleanup
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

# cleanup-ubuntu14-gcc:
#   stage: cleanup-ubuntu14-gcc
#   variables:
#     OS: 'ubuntu14'
#     COMPILER: 'gcc'
#   script:
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}


#cleanup-arch-gcc:
#  stage: cleanup-arch-gcc
#  variables:
#    OS: 'arch'
#    COMPILER: 'gcc'
#  script:
#    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
#  except:
#    - master

# pages:
#   stage: cleanup-ubuntu16-gcc
#   variables:
#     OS: 'ubuntu16'
#     COMPILER: 'gcc'
#   script:
#     - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}.container
#     - mkdir -p $(dirname ${CONTAINER_FILE})
#     - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "mkdir -p doc/html; doxygen Doxyfile; cp -R doc/html /public";
#     - docker cp $(cat ${CONTAINER_FILE}):/public ./
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
#   artifacts:
#     paths:
#       - public
#   only:
#     - master

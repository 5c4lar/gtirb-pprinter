variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - case "$(uname -s)" in
        CYGWIN*) systeminfo;;
        *) docker info;;
    esac

stages:
  - check-format
  - build
  - test-and-tag
  - deploy
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

# The two build templates below ultimately call the build script for the
# appropriate platform & task (the .ci/build-*.sh scripts).
# For windows builds, this is done directly. For linux builds, the build script
# is called in the Dockerfile.

.build-template: &build
  stage: build
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed 's/clang++/clang/;s/g++/gcc/;s/\(-[0-9]\)*//g' )
    - cp /u4/TARBALLS/debloat/pkgs/libcapstone-dev_4.0.1-gt1_amd64.deb ./
    - GTIRB_BRANCH=$(sed -e '/find_package(gtirb /!d' -e 's/[^.0-9]//g' CMakeLists.txt)
    - GTIRB_BRANCH=$((grep -Eo "check_gtirb_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_branch(//') || echo v${GTIRB_BRANCH:?})
    - "echo \"GTIRB_BRANCH is: $GTIRB_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=package-arch --output "gtirb-arch-artifacts.zip"
    - unzip -l gtirb-arch-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu16 --output "gtirb-ubuntu16-artifacts.zip"
    - unzip -l gtirb-ubuntu16-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu18 --output "gtirb-ubuntu18-artifacts.zip"
    - unzip -l gtirb-ubuntu18-artifacts.zip
    - docker build -f .ci/Dockerfile.$OS -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME} --build-arg CXX_COMPILER=${COMPILER} --build-arg CPACK_GENERATOR=${CPACK_GENERATOR} .

.windows-build-template: &windows-build
  stage: build
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - 'gtirb_pprinter*.zip'
  script:
    # Install gtirb
    - GTIRB_BRANCH=$(sed -e '/find_package(gtirb /!d' -e 's/[^.0-9]//g' CMakeLists.txt)
    - GTIRB_BRANCH=$((grep -Eo "check_gtirb_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_branch(//') || echo v${GTIRB_BRANCH:?})
    - "echo \"GTIRB_BRANCH is: $GTIRB_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=build-windows-msvc-${BUILD_TYPE,,} --output "gtirb-artifacts.zip"
    - unzip gtirb-artifacts.zip
    # Build gtirb-pprinter
    - GTIRB_DIR=$(cygpath -m $(realpath $(find ./ -type d -name GTIRB-*-win64)/lib/gtirb))
    - mkdir build
    - cd build
    - LIB_BUILD_TYPE=$(echo $BUILD_TYPE | sed 's/Debug/Debug/;s/RelWithDebInfo/Release/')
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G \"Ninja\" -DBOOST_ROOT=\"C:\\Boost\" -DCMAKE_CXX_FLAGS=\"/DBOOST_ALL_DYN_LINK\" -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=1 -DCAPSTONE=\"C:\\capstone-${LIB_BUILD_TYPE}\\lib\\capstone.lib\" -DCAPSTONE_INCLUDE_DIRS=\"C:\\capstone-${LIB_BUILD_TYPE}\\include\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_PROGRAM_PATH=\"C:\\capstone-${LIB_BUILD_TYPE}\\bin\" -Dgtirb_DIR=$GTIRB_DIR .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    # Build ZIP package, and include DLLs needed to run exes.
    - cmd.exe /C "C:\\PROGRA~1\\CMake\\bin\\cpack.exe -G \"ZIP\""
    - ZIP_FILE=(gtirb_pprinter*win64.zip)
    - BASE_DIRECTORY="${ZIP_FILE%.*}"
    - mkdir -p $BASE_DIRECTORY/bin
    - cp /cygdrive/c/Boost/lib/boost_*-vc141-mt$(echo $BUILD_TYPE | sed 's/Debug/-gd/;s/RelWithDebInfo//')-x64-1_67.dll $BASE_DIRECTORY/bin/
    - GTIRB_DLL=$GTIRB_DIR/../../bin/gtirb$(echo $BUILD_TYPE | sed 's/Debug/d/;s/RelWithDebInfo//').dll
    - cp $GTIRB_DLL $BASE_DIRECTORY/bin/$(basename $GTIRB_DLL)
    - zip -u $ZIP_FILE $BASE_DIRECTORY/bin/*.dll
    - cp $ZIP_FILE ../

.test-and-tag-template: &test-and-tag
  stage: test-and-tag
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - docker run ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "cd build/ && ctest -V"
    - docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}

.cleanup-template: &cleanup
  stage: cleanup
  when: always
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

build-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
  <<: *build

build-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang++-8'
  <<: *build

build-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    CPACK_GENERATOR: 'DEB'
  <<: *build

build-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang++'
  <<: *build

build-arch-gcc:
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    CPACK_GENERATOR: 'TGZ'
  <<: *build

build-arch-clang:
  variables:
    OS: 'arch'
    COMPILER: 'clang++'
  <<: *build

build-windows-msvc-debug:
  variables:
    BUILD_TYPE: 'Debug'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

build-windows-msvc-relwithdebinfo:
  variables:
    BUILD_TYPE: 'RelWithDebInfo'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

test-and-tag-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *test-and-tag

test-and-tag-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *test-and-tag

test-and-tag-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *test-and-tag

test-and-tag-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *test-and-tag

test-and-tag-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *test-and-tag

test-and-tag-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *test-and-tag

test-make-install:
  stage: test-and-tag
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    INSTALLER: 'make install'
  script:
    - export LOCAL_IMAGE=$(echo ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} |  tr A-Z a-z)
    - docker build --rm -f .ci/Dockerfile.test-install -t ${LOCAL_IMAGE_NAME}-${CI_JOB_NAME} --build-arg IMAGE=$LOCAL_IMAGE --build-arg INSTALLER="$INSTALLER" .

cleanup-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *cleanup

cleanup-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *cleanup

# pages:
#   stage: cleanup-ubuntu16-gcc
#   variables:
#     OS: 'ubuntu16'
#     COMPILER: 'gcc'
#   script:
#     - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}.container
#     - mkdir -p $(dirname ${CONTAINER_FILE})
#     - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "mkdir -p doc/html; doxygen Doxyfile; cp -R doc/html /public";
#     - docker cp $(cat ${CONTAINER_FILE}):/public ./
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
#   artifacts:
#     paths:
#       - public
#   only:
#     - master

.linux-installer-template: &linux-installer
  stage: deploy
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ./gtirb*.${EXTENSION}
  script:
    - export COMPILER_NAME=$(echo ${COMPILER} | sed 's/clang++/clang/;s/g++/gcc/;s/\(-[0-9]\)*//g' )
    - export CONTAINER_FILE=$(mktemp -d)/cidfile
    - docker create --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER_NAME}
    - docker cp $(cat ${CONTAINER_FILE}):/gt/gtirb-pprinter/build ./build-artifacts
    - docker container rm -f $(cat ${CONTAINER_FILE})
    - rm -rf $(dirname $CONTAINER_FILE)
    - mv ./build-artifacts/*.${EXTENSION} ./
    - rm -rf ./build-artifacts/
    - cp /u4/TARBALLS/debloat/pkgs/libcapstone-dev_4.0.1-gt1_amd64.deb ./
    - GTIRB_BRANCH=$(sed -e '/find_package(gtirb /!d' -e 's/[^.0-9]//g' CMakeLists.txt)
    - GTIRB_BRANCH=$((grep -Eo "check_gtirb_branch\([^)]+" CMakeLists.txt | sed 's/check_gtirb_branch(//') || echo v${GTIRB_BRANCH:?})
    - "echo \"GTIRB_BRANCH is: $GTIRB_BRANCH\""
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=package-arch --output "gtirb-arch-artifacts.zip"
    - unzip -l gtirb-arch-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu16 --output "gtirb-ubuntu16-artifacts.zip"
    - unzip -l gtirb-ubuntu16-artifacts.zip
    - curl -L https://git.grammatech.com/rewriting/gtirb/-/jobs/artifacts/${GTIRB_BRANCH}/download?job=debian-installer-ubuntu18 --output "gtirb-ubuntu18-artifacts.zip"
    - unzip -l gtirb-ubuntu18-artifacts.zip
    - if [ -f .ci/Dockerfile.test-${OS}-package ]; then docker build -f .ci/Dockerfile.test-${OS}-package .; fi

debian-installer-ubuntu16:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'g++-7'
    EXTENSION: 'deb'
  <<: *linux-installer

debian-installer-ubuntu18:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'g++-7'
    EXTENSION: 'deb'
  <<: *linux-installer

package-arch:
  variables:
    OS: 'arch'
    COMPILER: 'g++'
    EXTENSION: 'pkg.tar.xz'
  <<: *linux-installer

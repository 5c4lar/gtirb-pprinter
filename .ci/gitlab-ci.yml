variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - type docker >/dev/null 2>&1 && docker info

stages:
  - check-format
  - build
  - test-and-tag
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

.build-template: &build
  stage: build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - docker build -f .ci/Dockerfile.$OS-$COMPILER -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} .

.windows-build-template: &windows-build
  stage: build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - cd gtirb
    - mkdir build
    - cd build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G "Ninja" -DBOOST_ROOT=\"C:\\Boost\" -DCMAKE_PREFIX_PATH=\"C:\\Program Files (x86)\\protobuf\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} .."
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && ninja"
    - cd ../..
    - mkdir build
    - cmd.exe /C "C:\\VS\\VC\\Auxiliary\\Build\\vcvars64.bat && C:\\PROGRA~1\\CMake\\bin\\cmake.exe -G \"Ninja\" -DBOOST_ROOT=\"C:\\Boost\" -DCMAKE_CXX_FLAGS=\"/DBOOST_ALL_DYN_LINK\" -DCMAKE_WINDOWS_EXPORT_ALL_SYMBOLS=1 -DCAPSTONE=\"C:\\capstone-${BUILD_TYPE}\\lib\\capstone.lib\" -DCAPSTONE_INCLUDE_DIRS=\"C:\\capstone-${BUILD_TYPE}\\include\" -DCMAKE_BUILD_TYPE=${BUILD_TYPE} .."

.test-and-tag-template: &test-and-tag
  stage: test-and-tag
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}

.cleanup-template: &cleanup
  stage: cleanup
  when: always
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

build-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *build

build-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *build

build-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *build

build-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *build

build-windows-debug:
  variables:
    BUILD_TYPE: 'Debug'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

build-windows-release:
  variables:
    BUILD_TYPE: 'Release'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

test-and-tag-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *test-and-tag

test-and-tag-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *test-and-tag

test-and-tag-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *test-and-tag

test-and-tag-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *test-and-tag

test-and-tag-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *test-and-tag

test-and-tag-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *test-and-tag

cleanup-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *cleanup

cleanup-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *cleanup

# pages:
#   stage: cleanup-ubuntu16-gcc
#   variables:
#     OS: 'ubuntu16'
#     COMPILER: 'gcc'
#   script:
#     - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}.container
#     - mkdir -p $(dirname ${CONTAINER_FILE})
#     - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "mkdir -p doc/html; doxygen Doxyfile; cp -R doc/html /public";
#     - docker cp $(cat ${CONTAINER_FILE}):/public ./
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
#   artifacts:
#     paths:
#       - public
#   only:
#     - master

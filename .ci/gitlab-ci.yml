variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - docker info

stages:
  - check-format
  - build

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .

.build-template: &build
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - IMAGE_NAME=${DOCKER_REGISTRY}/{$CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
    - docker build -f .ci/Dockerfile.$OS-$COMPILER -t $IMAGE_NAME .
    - docker push $IMAGE_NAME;

build-ubuntu16-gcc:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu16-clang:
  stage: build
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *build

build-ubuntu18-gcc:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu18-clang:
  stage: build
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *build

build-arch-gcc:
   stage: build
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *build

build-arch-clang:
   stage: build
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *build

# pages:
#   stage: cleanup-ubuntu16-gcc
#   variables:
#     OS: 'ubuntu16'
#     COMPILER: 'gcc'
#   script:
#     - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}.container
#     - mkdir -p $(dirname ${CONTAINER_FILE})
#     - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "mkdir -p doc/html; doxygen Doxyfile; cp -R doc/html /public";
#     - docker cp $(cat ${CONTAINER_FILE}):/public ./
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
#   artifacts:
#     paths:
#       - public
#   only:
#     - master

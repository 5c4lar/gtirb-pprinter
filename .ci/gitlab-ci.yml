variables:
  DOCKER_REGISTRY: "docker.grammatech.com"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'
  GIT_SUBMODULE_STRATEGY: recursive

before_script:
  - case "$(uname -s)" in
        CYGWIN*) systeminfo;;
        *) docker info;;
    esac

stages:
  - check-format
  - build
  - test-and-tag
  - deploy
  - cleanup

check-format:
  stage: check-format
  script:
    - docker build --rm -f .ci/Dockerfile.formatter .


# The two build templates below ultimately call the build script for the
# appropriate platform & task (the .ci/build-*.sh scripts).
# For windows builds, this is done directly. For linux builds, the build script
# is called in the Dockerfile.

.build-template: &build
  stage: build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - docker build -f .ci/Dockerfile.$OS-$COMPILER -t ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} .

.windows-build-template: &windows-build
  stage: build
  script:
    - git clone https://git.grammatech.com/rewriting/gtirb.git
    - .ci/build-windows.sh $BUILD_TYPE

.test-and-tag-template: &test-and-tag
  stage: test-and-tag
  script:
    - if [ "$CI_COMMIT_REF_SLUG" = "master" ];
      then
          PUSH_TAG=latest;
      else
          PUSH_TAG=$CI_COMMIT_REF_SLUG;
      fi
    - docker run ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "cd build/ && ctest -V"
    - docker tag ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - docker push ${DOCKER_REGISTRY}/${CI_PROJECT_PATH}/${OS}-${COMPILER}:${PUSH_TAG}

.cleanup-template: &cleanup
  stage: cleanup
  when: always
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}

build-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *build

build-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *build

build-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    CPACK_GENERATOR: 'DEB'
  <<: *build

build-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *build

build-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *build

build-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *build

build-windows-debug:
  variables:
    BUILD_TYPE: 'Debug'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

build-windows-release:
  variables:
    BUILD_TYPE: 'Release'
  tags:
    - gtirb-pprinter-windows
  <<: *windows-build

test-and-tag-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *test-and-tag

test-and-tag-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *test-and-tag

test-and-tag-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *test-and-tag

test-and-tag-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *test-and-tag

test-and-tag-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *test-and-tag

test-and-tag-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *test-and-tag

test-debian-install:
  stage: test-and-tag
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
    INSTALLER: 'dpkg -i gtirb_pprinter-*-Linux.deb'
  script:
    - export LOCAL_IMAGE=$(echo ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} |  tr A-Z a-z)
    - docker build --rm -f .ci/Dockerfile.test-install -t ${LOCAL_IMAGE_NAME}-${CI_JOB_NAME} --build-arg IMAGE=$LOCAL_IMAGE --build-arg INSTALLER="$INSTALLER" .

cleanup-ubuntu16-gcc:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu16-clang:
  variables:
    OS: 'ubuntu16'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-ubuntu18-gcc:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  <<: *cleanup

cleanup-ubuntu18-clang:
  variables:
    OS: 'ubuntu18'
    COMPILER: 'clang'
  <<: *cleanup

cleanup-arch-gcc:
   variables:
     OS: 'arch'
     COMPILER: 'gcc'
   <<: *cleanup

cleanup-arch-clang:
   variables:
     OS: 'arch'
     COMPILER: 'clang'
   <<: *cleanup

# pages:
#   stage: cleanup-ubuntu16-gcc
#   variables:
#     OS: 'ubuntu16'
#     COMPILER: 'gcc'
#   script:
#     - export CONTAINER_FILE=${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}.container
#     - mkdir -p $(dirname ${CONTAINER_FILE})
#     - docker run --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER} /bin/bash -c "mkdir -p doc/html; doxygen Doxyfile; cp -R doc/html /public";
#     - docker cp $(cat ${CONTAINER_FILE}):/public ./
#     - docker rmi -f ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
#   artifacts:
#     paths:
#       - public
#   only:
#     - master

debian-installer:
  stage: deploy
  variables:
    OS: 'ubuntu18'
    COMPILER: 'gcc'
  artifacts:
    name: "$CI_COMMIT_REF_NAME-$CI_JOB_NAME"
    paths:
      - ./gtirb_pprinter-*-Linux.deb
  script:
    - export CONTAINER_FILE=$(mktemp -d)/cidfile
    - docker create --cidfile=${CONTAINER_FILE} ${LOCAL_IMAGE_NAME}-${OS}-${COMPILER}
    - docker cp $(cat ${CONTAINER_FILE}):/gt/gtirb-pprinter/build ./build-artifacts
    - docker container rm -f $(cat ${CONTAINER_FILE})
    - rm -rf $(dirname $CONTAINER_FILE)
    - mv ./build-artifacts/gtirb_pprinter-*-Linux.deb ./
    - rm -rf ./build-artifacts
